// HCL spec (https://github.com/hashicorp/hcl/blob/main/hclsyntax/spec.md)

// The top-level scope of an HCL file
Hcl = _{ SOI ~ Body ~ EOI }

// Structural elements
Body      = { (Attribute | Block)* }
Attribute = { Identifier ~ "=" ~ Expression }
Block     = { Identifier ~ (StringLit | Identifier)* ~ BlockBody }
BlockBody = { "{" ~ Body ~ "}" }

// Expressions
Expression = _{ Operation | Conditional | ExprTerm }
ExprTerm   = _{ Value | FunctionCall | ForExpr | VariableExpr | ("(" ~ Expression ~ ")") }

// Values
Value = _{ LiteralValue | CollectionValue | Heredoc }

// Literal values
LiteralValue = _{ StringLit | NumericLit | BooleanLit | NullLit }

// Identifiers
Identifier     = @{ IdentFirstChar ~ IdentChar* }
IdentChar      = _{ Letter | Decimal | "-" | "_" }
IdentFirstChar = _{ Letter | "_" }
Letter         = _{ 'a'..'z' | 'A'..'Z' }

// Booleans
BooleanLit = @{ Boolean ~ !Identifier }
Boolean    =  { "true" | "false" }

// Null
NullLit = @{ Null ~ !Identifier }
Null    =  { "null" }

// Numeric literals
NumericLit = _{ Float | Int }
Float      = @{ "-"? ~ Decimal+ ~ (("." ~ Decimal+ ~ (ExpMark ~ Decimal+)?) | (ExpMark ~ Decimal+)) }
Int        = @{ "-"? ~ Decimal+ }
ExpMark    =  { ("e" | "E") ~ ("+" | "-")? }
Decimal    =  { '0'..'9' }

// Collection values
CollectionValue = _{ Tuple | Object }
Tuple           =  { "[" ~ (Expression ~ (","? ~ Expression)* ~ ","?)? ~ "]" }
Object          =  { "{" ~ (ObjectItem ~ (","? ~ ObjectItem)* ~ ","?)? ~ "}" }
ObjectItem      = _{ ObjectItemIdent | ObjectItemExpr }
ObjectItemIdent = _{ Identifier ~ ("=" | ":") ~ Expression }
ObjectItemExpr  = _{ Expression ~ ("=" | ":") ~ Expression }

// Heredoc
Heredoc = ${
    HeredocIntro ~ PUSH(Identifier) ~ NEWLINE ~
    HeredocContent ~
    SpaceOrTab* ~ POP
}
HeredocIntro       = _{ (HeredocIntroIndent | HeredocIntroNormal) }
HeredocIntroIndent =  { "<<-" }
HeredocIntroNormal =  { "<<" }
HeredocContent     = @{ Template ~ NEWLINE }

// Templates
//
// @TODO(mohmann): treat everything as template literals for now as it's really hard to get
// interpolations and directives right recursively. We are not going to consume the tokens anyways
// right now.
//
// Template           =  { TemplateInterpolation | TemplateDirective | TemplateLiteral }
Template              =  { TemplateLiteral }
TemplateLiteral       = _{ (!(NEWLINE ~ SpaceOrTab* ~ PEEK) ~ ANY)* }
TemplateDirective     = _{ TemplateIf | TemplateFor }
TemplateInterpolation = !{ ("${" | "${~") ~ ("\"" | Expression) ~ ("}" | "~}") }

TemplateIf = {
    ("%{" | "%{~") ~ "if" ~ Expression ~ ("}" | "~}") ~
    Template ~
    (
        ("%{" | "%{~") ~ "else" ~ ("}" | "~}") ~
        Template
    )? ~
    ("%{" | "%{~") ~ "endif" ~ ("}" | "~}")
}

TemplateFor = {
    ("%{" | "%{~") ~ "for" ~ Identifier ~ ("," ~ Identifier)? ~ "in" ~ Expression ~ ("}" | "~}") ~
    Template ~
    ("%{" | "%{~") ~ "endfor" ~ ("}" | "~}")
}

// String literals
StringLit = ${ "\"" ~ String ~ "\"" }
String    =  { (TemplateInterpolation | ("\\" ~ ("\"" | "\\")) | (!"\"" ~ ANY))* }

// Functions and function calls
FunctionCall = @{
    Identifier ~ "(" ~
    WHITESPACE* ~ (COMMENT ~ WHITESPACE*)* ~
    Arguments ~
    WHITESPACE* ~ (COMMENT ~ WHITESPACE*)* ~
    ")" ~
    ElementAccess
}

Arguments = !{ (Expression ~ ("," ~ Expression)* ~ ("," | "...")?)? }

// For expressions
ForExpr       = { ForTupleExpr | ForObjectExpr }
ForTupleExpr  = { "[" ~ ForIntro ~ Expression ~ ForCond? ~ "]" }
ForObjectExpr = { "{" ~ ForIntro ~ Expression ~ "=>" ~ Expression ~ "..."? ~ ForCond? ~ "}" }
ForIntro      = { "for" ~ Identifier ~ ("," ~ Identifier)? ~ "in" ~ Expression ~ ":" }
ForCond       = { "if" ~ Expression }

// Variables and variable expressions
VariableExpr = @{ Identifier ~ ElementAccess }

// Index operator
Index       = @{ ("[" ~ IndexExpr ~ "]") | LegacyIndex }
LegacyIndex = @{ "." ~ Decimal+ }
IndexExpr   = !{ Expression }

// Attribute access operator
GetAttr = @{ "." ~ Identifier }

// Splat operators
Splat     =  { AttrSplat | FullSplat }
AttrSplat = @{ "." ~ "*" }
FullSplat = @{ "[" ~ "*" ~ "]" }

// Element access
ElementAccess = { (Splat | GetAttr | Index)* }

// Operations
Operation          = { UnaryOp | BinaryOp }
UnaryOp            = { ("-" | "!") ~ Expression }
BinaryOp           = { ExprTerm ~ BinaryOperator ~ Expression }
BinaryOperator     = { CompareOperator | ArithmeticOperator | LogicOperator }
CompareOperator    = { "==" | "!=" | "<=" | ">=" | "<" | ">" }
ArithmeticOperator = { "+" | "-" | "*" | "/" | "%" }
LogicOperator      = { "&&" | "||" | "!" }

// Conditional operator
CondExpr    = { ExprTerm | Operation }
Conditional = { CondExpr ~ "?" ~ Expression ~ ":" ~ Expression }

// Comments
COMMENT         = _{ InlineComment | BlockComment }
InlineComment   = _{ ("#" | "//") ~ (!EoInlineComment ~ ANY)* }
BlockComment    = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
EoInlineComment = _{ NEWLINE | EOI }

// Whitespace
WHITESPACE = _{ SpaceOrTab | NEWLINE }
SpaceOrTab = _{ " " | "\t" }
