// HCL spec (https://github.com/hashicorp/hcl/blob/main/hclsyntax/spec.md)

// The top-level scope of an HCL file
Hcl = _{ SOI ~ Body ~ EOI }

// Structural elements
Body      = { (Attribute | Block)* }
Attribute = { Identifier ~ "=" ~ Expression }
Block     = { Identifier ~ (StringLit | Identifier)* ~ BlockBody }
BlockBody = { "{" ~ Body ~ "}" }

// Expressions
Expression    = _{ Conditional | Operation | ExprTerm }
ExprTerm      =  { ExprTermInner ~ (Splat | GetAttr | Index)* }
ExprTermInner = _{ Value | TemplateExpr | FunctionCall | VariableExpr | ForExpr | ("(" ~ Expression ~ ")") }

// Values
Value = _{ LiteralValue | CollectionValue }

// Literal values
LiteralValue = _{ NumericLit | BooleanLit | NullLit | StringLit }

// Identifiers
Identifier     = @{ IdentFirstChar ~ IdentChar* }
IdentChar      = _{ Letter | Decimal | "-" | "_" }
IdentFirstChar = _{ Letter | "_" }
Letter         = _{ 'a'..'z' | 'A'..'Z' }

// Booleans
BooleanLit = @{ Boolean ~ !Identifier }
Boolean    =  { "true" | "false" }

// Null
NullLit = @{ Null ~ !Identifier }
Null    =  { "null" }

// Numeric literals
NumericLit = _{ Float | Int }
Float      = @{ Decimal+ ~ (("." ~ Decimal+ ~ (ExpMark ~ Decimal+)?) | (ExpMark ~ Decimal+)) }
Int        = @{ Decimal+ }
ExpMark    =  { ("e" | "E") ~ ("+" | "-")? }
Decimal    =  { '0'..'9' }

// Collection values
CollectionValue = _{ Tuple | Object }
Tuple           =  { "[" ~ (Expression ~ (","? ~ Expression)* ~ ","?)? ~ "]" }
Object          =  { "{" ~ (ObjectItem ~ (","? ~ ObjectItem)* ~ ","?)? ~ "}" }
ObjectItem      = _{ ObjectItemIdent | ObjectItemExpr }
ObjectItemIdent = _{ Identifier ~ ("=" | ":") ~ Expression }
ObjectItemExpr  = _{ Expression ~ ("=" | ":") ~ Expression }

// TemplateExpr
TemplateExpr = _ { QuotedStringTemplate | HeredocTemplate }

// HeredocTemplate
HeredocTemplate = ${
    HeredocIntro ~ PUSH(Identifier) ~ NEWLINE ~
    HeredocContent ~
    SpaceOrTab* ~ POP
}
HeredocIntro        = _{ (HeredocIntroIndent | HeredocIntroNormal) }
HeredocIntroIndent  =  { "<<-" }
HeredocIntroNormal  =  { "<<" }
HeredocContent      = @{ HeredocContentInner ~ NEWLINE }
HeredocContentInner = { (!(NEWLINE ~ SpaceOrTab* ~ PEEK) ~ ANY)* }

// Quoted string templates
QuotedStringTemplate      = ${ "\"" ~ QuotedStringTemplateInner ~ "\"" }
QuotedStringTemplateInner =  {
    (QuotedStringTemplateLiteral | TemplateInterpolation | TemplateDirective)*
}
QuotedStringTemplateLiteral = @{ StringPart+ }

// String literals
StringLit  = ${ "\"" ~ String ~ "\"" }
String     = @{ StringPart* }
StringPart = {
    "$${"
    | "%%{"
    | !("\"" | "\\" | "${" | "%{") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

// Functions and function calls
FunctionCall = @{
    Identifier ~ "(" ~
    WHITESPACE* ~ (COMMENT ~ WHITESPACE*)* ~
    Arguments ~
    WHITESPACE* ~ (COMMENT ~ WHITESPACE*)* ~
    ")"
}

Arguments = !{ (Expression ~ ("," ~ Expression)* ~ ("," | "...")?)? }

// For expressions
ForExpr       = { ForTupleExpr | ForObjectExpr }
ForTupleExpr  = { "[" ~ ForIntro ~ Expression ~ ForCond? ~ "]" }
ForObjectExpr = { "{" ~ ForIntro ~ Expression ~ "=>" ~ Expression ~ "..."? ~ ForCond? ~ "}" }
ForIntro      = { "for" ~ Identifier ~ ("," ~ Identifier)? ~ "in" ~ Expression ~ ":" }
ForCond       = { "if" ~ Expression }

// Variables and variable expressions
VariableExpr = @{ Identifier }

// Index operator
Index       =  { ("[" ~ Expression ~ "]") | LegacyIndex }
LegacyIndex = ${ "." ~ Decimal+ }

// Attribute access operator
GetAttr = ${ "." ~ Identifier }

// Splat operators
Splat     = _{ (AttrSplat ~ GetAttr*) | (FullSplat ~ (GetAttr | Index)*) }
AttrSplat =  { ".*" }
FullSplat =  { "[*]" }

// Operations
Operation          = { UnaryOp | BinaryOp }
UnaryOp            = { UnaryOperator ~ Expression }
UnaryOperator      = { "-" | "!" }
BinaryOp           = { ExprTerm ~ BinaryOperator ~ Expression }
BinaryOperator     = { CompareOperator | ArithmeticOperator | LogicOperator }
CompareOperator    = { "==" | "!=" | "<=" | ">=" | "<" | ">" }
ArithmeticOperator = { "+" | "-" | "*" | "/" | "%" }
LogicOperator      = { "&&" | "||" }


// Conditional operator
CondExpr    = { ExprTerm | Operation }
Conditional = { CondExpr ~ "?" ~ Expression ~ ":" ~ Expression }

// Comments
COMMENT         = _{ InlineComment | BlockComment }
InlineComment   = _{ ("#" | "//") ~ (!EoInlineComment ~ ANY)* }
BlockComment    = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
EoInlineComment = _{ NEWLINE | EOI }

// Whitespace
WHITESPACE = _{ SpaceOrTab | NEWLINE }
SpaceOrTab = _{ " " | "\t" }

// The template sub-language.
HclTemplate           = _{ SOI ~ Template ~ EOI }

Template              =  { (TemplateLiteral | TemplateInterpolation | TemplateDirective)* }
TemplateLiteral       =  { ("$${" | "%%{" | (!("${" | "%{") ~ ANY))+ }
TemplateDirective     = !{ TemplateIf | TemplateFor }
TemplateInterpolation = !{ ("${~" | "${") ~ Expression ~ ("}" | "~}") }

TemplateIf = {
    ("%{~" | "%{") ~ "if" ~ Expression ~ ("}" | "~}") ~
    Template ~
    (
        ("%{~" | "%{") ~ "else" ~ ("}" | "~}") ~
        Template
    )? ~
    ("%{~" | "%{") ~ "endif" ~ ("}" | "~}")
}

TemplateFor = {
    ("%{~" | "%{") ~ "for" ~ Identifier ~ ("," ~ Identifier)? ~ "in" ~ Expression ~ ("}" | "~}") ~
    Template ~
    ("%{~" | "%{") ~ "endfor" ~ ("}" | "~}")
}
